#!/usr/bin/env node
/* eslint-disable no-await-in-loop */

import fs from 'fs/promises';

import axios from 'axios';

import { MurmurHash, stripIndent } from '../src/lib/utils/index.js';

// Fetches pro players from OpenDota and updates the definition

const proPlayersURL = 'https://www.opendota.com/api/proplayers';
const localDefinition = './src/lib/definitions/proPlayersByHash.js';

const hash = (id) => `${MurmurHash.hash64(id)}n`;
const obfuscate = (name) => Buffer.from(name).toString('base64');

(async () => {
  const { data } = await axios.get(proPlayersURL);

  process.stdout.write(`processing ${data.length} pro players...`);

  const entries = data.reduce((list, player) => {
    const { name, steamid, team_id } = player;
    if (steamid) {
      list.push(`${hash(steamid)}: { name: '${obfuscate(name)}', teamID: ${team_id} }`);
    }
    return list;
  }, []);

  const contents = stripIndent`
    // Generated by \`npm run sync:pro-players\` fetching pro players from OpenDota

    import MurmurHash from '../utils/MurmurHash.js';

    const deobfuscate = (definitions) => {
      for (const [, definition] of Object.entries(definitions)) {
        definition.name = Buffer.from(definition.name, 'base64').toString();
      }
      return definitions;
    };

    // Steam IDs are hashed and names obfuscated (at rest) for privacy reasons
    const proPlayersByHash = deobfuscate({
      ${entries.join(',\n      ')},
    });

    const lookupProPlayer = (steamID) => (
      proPlayersByHash[MurmurHash.hash64(String(steamID))]
    );

    export default proPlayersByHash;
    export { lookupProPlayer };
  `;

  const file = await fs.open(localDefinition, 'w+');
  await file.write(contents);
  await file.close();

  process.stdout.write(' done.\n');
})();
